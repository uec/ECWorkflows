#!/usr/bin/perl

use File::Basename qw / basename /;
use File::Temp qw/ tempfile tempdir /;
use strict;

my $MIN_QUAL  = 0;
my $MAX_IDENT = 1;
my $USAGE =
"generateChIPInfo_solexaPileup.pl [-test] file1.pileup file2.pileup file3.pileup file4.pileup ...";

# Parse command line
my $test = 0;
if ( $ARGV[0] =~ /^-t/ )
{
	shift @ARGV;
	$test = 1;
}
my $desc = shift @ARGV;
unshift( @ARGV, $desc ) if ( -f $desc );    # Desc is optional

my (@fns) = @ARGV;
die "$USAGE\n" unless ( @fns > 0 );

FILE: foreach my $fn (@fns)
{
	my $base = basename($fn);
	$base =~ s/\.pileup//g;
	$base =~ s/\.gz//g;

	my @cmds  = ();
	my $outfn = "${base}.coverage.m${MAX_IDENT}.q${MIN_QUAL}";

	# Features
	my $featDir = "~/storage/genomic-data-misc";
	my $featArr = [
		[
			"PcG_sites/Ku2008/hg18.ES.Ring1B.HMM.startsEnds.gff",
			"Ku2008-Ring1B"
		],
		[
			"PcG_sites/Ku2008/hg18.ES.H3K27me3.HMM.startsEnds.gff",
			"Ku2008-H3K27"
		],
		[ "guelen2008-laminB1Lads.startsEnds.gff", "guelen2008-LADs" ],
		[ "knownGene-tss.NO_overlap_tj_or_gg_cpgi.hg18.gtf", "kg-tssNoncgi" ],
		[ "knownGene-tss.overlap_tj_or_gg_cpgi.hg18.gtf",    "kg-tssCgi" ],
		[ "knownGene-exon.hg18.gtf",                         "kg-exon" ],
		[ "CTCF/Kim2007/ctcf.imr90.hg18.startsEnds.gff",     "kim2007-ctcf" ],
		[
			"repeats/DbRepeatMaskerLINE.hg18.startsEnds.gff", "RepeatMaskerLINE"
		],
		[
			"repeats/DbRepeatMaskerSINE.hg18.startsEnds.gff", "RepeatMaskerSINE"
		],
		[
"CpG_islands/Takai_Jones_plus_GG.merged.exonOverlapNoPromoters.hg18.gtf",
			"TJGG-exonNoTss"
		]
	];

	foreach my $featPair (@$featArr)
	{
		my ( $featfn, $feat ) = @$featPair;

		my $mem = ( $feat =~ /RepeatMasker/i ) ? "3995m" : "1995m";
		push( @cmds,
"java -Xmx${mem} edu.usc.epigenome.scripts.PileupToAlignedByFeats -featWindSize 10000 -maxIdentical ${MAX_IDENT} -minDepth 0 -minDepthEachStrand -minQual ${MIN_QUAL} -featGtf ${featDir}/${featfn}  $fn > ${outfn}.${feat}.aligned.csv"
		);
	}

	# wig file
	my $step     = 50;
	my $wind     = 600;
	my $stepWind = "-stepSize ${step} -windSize ${wind}";
	my $wigfn    = "${outfn}.wig.gz";
	push( @cmds,
"java -Xmx1995m edu.usc.epigenome.scripts.PileupToWig ${stepWind} -name \"${base}\" -desc \"Generated by java PileupToWig ${stepWind}\" -maxIdentical ${MAX_IDENT} -type 2 -output ${wigfn} ${fn}"
	);
	foreach my $cmd (@cmds)
	{
		print STDERR $cmd . "\n";
		if ( !$test )
		{
			runCmd($cmd);
		}
	}

}

sub runCmd
{
	my ($cmd) = @_;

	my ( $fh, $file ) = tempfile( "generateChIPInfoXXXXXX", DIR => "/tmp" );
	print $fh "#Run on 1 processors on laird\n#PBS -l walltime=40:00:00\n#PBS -l nodes=1:ppn=1\n#PBS -l mem=3995mb\n#PBS -l arch=x86_64\n#PBS -q laird\n";
	print $fh "cd \"\$PBS_O_WORKDIR\"\n";
	print $fh "${cmd}\n";
	close($fh);

	my $fullcmd = "qsub $file";
	print STDERR "${fullcmd}\n";
	`$fullcmd`;
	unlink($file);
}
